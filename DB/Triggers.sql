----------------------------- TRIGGERS --------------------------------

--HACE QUE LA FECHA DE CONTRATACIÃ“N SE ACTUALICE CADA VEZ QUE SE INSERTE
--UN NUEVO EMPLEADO
CREATE OR REPLACE TRIGGER RCJNFRJR_UPDATE_HIRE_DATE
AFTER INSERT 
ON RCJNFRJR_EMPLOYEE
FOR EACH ROW
BEGIN
    UPDATE RCJNFRJR_REGISTER
    SET HIRE_DATE = :NEW.HIRE_DATE
    WHERE ID_REGISTER = :NEW.ID_REGISTER;
END;

CREATE OR REPLACE TRIGGER RCJNFRJR_TRG_SERVICE
BEFORE INSERT 
ON RCJNFRJR_SERVICE
FOR EACH ROW
BEGIN
    :NEW.ID_SERVICE := SEQ_SERVICE.NEXTVAL;
END;

CREATE OR REPLACE TRIGGER RCJNFRJR_TRG_INVENTORY
BEFORE INSERT 
ON RCJNFRJR_INVENTORY
FOR EACH ROW
BEGIN
    :NEW.ID_INVENTORY := SEQ_INVENTORY.NEXTVAL;
END;

CREATE OR REPLACE TRIGGER RCJNFRJR_TRG_MATERIALS
BEFORE INSERT 
ON RCJNFRJR_MATERIALS
FOR EACH ROW
BEGIN
    :NEW.ID_MATERIALS := SEQ_MATERIALS.NEXTVAL;
END;

CREATE OR REPLACE TRIGGER RCJNFRJR_TRG_EQUIPMENT
BEFORE INSERT 
ON RCJNFRJR_EQUIPMENT
FOR EACH ROW
BEGIN
    :NEW.ID_EQUIPMENT := SEQ_EQUIPMENT.NEXTVAL;
END;



CREATE OR REPLACE TRIGGER RCJNFRJR_PK_EMPLOYEE
BEFORE INSERT
ON RCJNFRJR_EMPLOYEE
FOR EACH ROW 
BEGIN
	SELECT MAX(EMPLOYEE_ID)+1 INTO :NEW.EMPLOYEE_ID FROM RCJNFRJR_EMPLOYEE;

	IF(:NEW.EMPLOYEE_ID IS NULL)THEN
		:NEW.EMPLOYEE_ID := 1;
	END IF;
END;



CREATE OR REPLACE TRIGGER RCJNFRJR_PK_REGISTER
BEFORE INSERT
ON RCJNFRJR_REGISTER
FOR EACH ROW 
BEGIN
	SELECT MAX(ID_REGISTER)+1 INTO :NEW.ID_REGISTER FROM RCJNFRJR_EMPLOYEE;

	IF(:NEW.ID_REGISTER IS NULL)THEN
		:NEW.ID_REGISTER := 1;
	END IF;
END;



CREATE OR REPLACE TRIGGER RCJNFRJR_JOB
BEFORE INSERT OR UPDATE
ON RCJNFRJR_JOBS
FOR EACH ROW 

	
BEGIN
	
	IF(:NEW.JOB_ID = JOB_ID_P)THEN
		RAISE_APPLICATION_ERROR(-20000, 'SALARIO MINIMO NO PUEDE SER MAYOR A SALARIO MAXIMO');
	END IF;

	IF(:NEW.MIN_SALARY > :NEW.MAX_SALARY)THEN
		RAISE_APPLICATION_ERROR(-20000, 'SALARIO MINIMO NO PUEDE SER MAYOR A SALARIO MAXIMO');
	END IF;

END;


CREATE OR REPLACE TRIGGER RCJNFRJR_VALID_EMPLOYEE_SALARY
BEFORE INSERT OR UPDATE
ON RCJNFRJR_EMPLOYEE
FOR EACH ROW 
IS 
	JOB_MIN_SALARY_P NUMBER;
	JOB_MAX_SALARY_P NUMBER;
BEGIN

	SELECT JOB_MIN_SALARY, JOB_MAX_SALARY INTO JOB_MIN_SALARY_P, JOB_MAX_SALARY_P
	FROM RCJNFRJR_JOBS
	WHERE JOB_ID = :NEW.JOB_ID;

	IF(:NEW.SALARY < :JOB_MIN_SALARY_P)THEN
		RAISE_APPLICATION_ERROR(-20000, 'EL SALARIO MINIMO PARA ESTE PUESTO ES DE ' || JOB_MIN_SALARY_P);
	END IF;

	IF(:NEW.SALARY > :JOB_MAX_SALARY_P)THEN
		RAISE_APPLICATION_ERROR(-20000, 'EL SALARIO MAXIMO PARA ESTE PUESTO ES DE ' || JOB_MAX_SALARY_P);
	END IF;

END;



CREATE OR REPLACE TRIGGER RCJNFRJR_UPDATE_EMPLOYEE
BEFORE UPDATE
ON RCJNFRJR_EMPLOYEE
FOR EACH ROW 
IS 

	ACCOUNT_NUMBER_P NUMBER;
BEGIN
	
	SELECT COUNT(*) INTO ACCOUNT_NUMBER_P
	FROM RCJNFRJR_EMPLOYEE
	WHERE ACCOUNT_NUMBER = :NEW.ACCOUNT_NUMBER AND EMPLOYEE_ID != :OLD.EMPLOYEE_ID;

	--SI EXISTE Y LE PERTENECE A OTRO EMPLEADO, RAISE ERROR
	IF(ACCOUNT_NUMBER_P > 0)THEN
		RAISE_APPLICATION_ERROR(-20000, 'CUENTA YA ASIGNADA A OTRO EMPLEADO');
		ROLLBACK;
	END IF;

	

END;

